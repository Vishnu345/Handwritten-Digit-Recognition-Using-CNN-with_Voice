import tensorflow as tf
mnist=tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()


import matplotlib.pyplot as plt
plt.imshow(x_train[0])
plt.show()
plt.imshow(x_train[0],cmap=plt.cm.binary)
print(x_train[0])
x_train=tf.keras.utils.normalize(x_train,axis=1)
x_test=tf.keras.utils.normalize(x_test,axis=1)
plt.imshow(x_train[0],cmap=plt.cm.binary)
print(x_train[0])


import numpy as np
IMG_SIZE=28
x_trainr=np.array(x_train).reshape(-1,IMG_SIZE,IMG_SIZE,1)
x_testr=np.array(x_test).reshape(-1,IMG_SIZE,IMG_SIZE,1)
print('Training Samples Dimensions',x_trainr.shape)
print('Testing Samples Dimensions',x_testr.shape)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten,Conv2D,MaxPooling2D
model=Sequential()

#first convolution layer
model.add(Conv2D(64,(3,3),input_shape=x_trainr.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#second convolution layer
model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#Third convolution layer
model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#fully connected layer 1
model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))

#fully connected layer 2
model.add(Dense(32))
model.add(Activation('relu'))

#fully connected layer 3
model.add(Dense(10))
model.add(Activation('softmax'))


model.summary()
print('Training samples =',len(x_trainr))
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
model.fit(x_trainr,y_train,epochs=5, validation_split = 0.3)


#evaluating on testing dataset MNIST
test_loss,test_acc = model.evaluate(x_testr,y_test)
print('Test loss on 10,000 test samples',test_loss)
print('Validation Accuracy on 10,000 test samples',test_acc)
predictions=model.predict([x_testr])
print(predictions)
print(np.argmax(predictions[0]))
plt.imshow(x_test[0])



import cv2
import pyttsx3
img=cv2.imread("three.png")
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
resi=cv2.resize(gray,(28,28),interpolation=cv2.INTER_AREA)
img=tf.keras.utils.normalize(resi,axis=1)
img=np.array(img).reshape(-1,IMG_SIZE,IMG_SIZE,1)
prediction=model.predict(img)
r=(np.argmax(prediction))
engine = pyttsx3.init()
engine.say(r)
engine.runAndWait()
print(r)
